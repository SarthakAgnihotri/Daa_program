1. Create a private function, dfs, which takes a node, an array of visited nodes (vis), a stack (st), and the adjacency list (adj) as parameters:
   1.1. Mark the current node as visited by setting vis[node] = 1.
   1.2. Iterate over each neighbor (it) of the current node:
       1.2.1. If the neighbor is not visited (vis[it] == 0), recursively call dfs with the neighbor as the new node.
   1.3. Push the current node into the stack (st).

2. Create a public function, topoSort, which takes the number of vertices (V) and the adjacency list (adj) as parameters and returns a vector of integers:
   2.1. Create an array of visited nodes, vis, and initialize all elements to 0.
   2.2. Create an empty stack, st.
   2.3. Iterate from 0 to V-1:
       2.3.1. If the current node is not visited (vis[i] == 0), call dfs with the current node, vis, st, and adj.
   2.4. Create an empty vector, ans.
   2.5. While the stack is not empty:
       2.5.1. Pop the top element from the stack and append it to the ans vector.
   2.6. Return the ans vector.

